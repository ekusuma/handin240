#!/usr/local/bin/python3
# handin240_close.py
#
# Utility script for closing student handin directories. Will take every student
# directory in the handin dir, and remove write permissions for that student.
# They will be replaced with read permissions.
#
# This script will also go into each student directory and check their handin
# (basically by running the handin script) and outputting an errors.log file. It
# will also put a summary in the STAFF folder.
#
# Requires TA/staff permissions for this to work properly.
#
# This script should be run as soon as the hw deadline is passed, or schedule a
# close time using the `-t` option.
#
# Edric Kusuma <ekusuma@cmu.edu>

import handin240_utils.admin as admin
from handin240_utils.utils import bcolors, Operation

import os
import sys
import argparse
import time

# Globals useful for this script
SCRIPT_PATH = os.path.dirname(os.path.realpath(__file__))
ENV         = admin.get_env(SCRIPT_PATH + '/config.ini')
STAFF_DIR   = ENV['staff_dir']
HANDIN_DIR  = ENV['handin_dir']
CFG_DIR     = ENV['cfg_dir']
RESULTS_DIR = ENV['results_dir']

# Returns a tuple of (options, args) parsed from the command line.
def getArgs():
    usage = "%(prog)s [-t] hwNum"
    parser = argparse.ArgumentParser(usage=usage)
    parser.add_argument("hwNum", help="number of assignment to close")
    parser.add_argument("-t", "--time", action="store", dest="time",
            help="scheduled close time in HH:MM (24-time)")
    parser.add_argument("-s", "--skip-check", action="store_true", dest="skip",
                        default=False,
                        help="skips student compilation checks")
    parser.add_argument('-n', '--dryrun', action='store_true', dest='dryrun',
                        default=False,
                        help='prevents script from creating/modifying files')
    return parser.parse_args()

def checkTime(targetTime):
    goodHr = (time.localtime().tm_hour == targetTime.tm_hour)
    goodMin = (time.localtime().tm_min == targetTime.tm_min)
    return goodHr and goodMin

def main():
    args = getArgs()
    hwNum = args.hwNum
    dryrun = args.dryrun
    skip = args.skip
    if (dryrun):
        bcolors.warning_msg('dryrun option is enabled. Script will not make ' +\
                'files or change perms!\n')
    closeTime = args.time
    isScheduled = (closeTime != None)
    if (isScheduled):
        try:
            closeTime = time.strptime(closeTime, "%H:%M")
        except (ValueError):
            print("ERROR: time must be in the format HH:MM (24-hour time)")
            return 255

    handinDir = HANDIN_DIR + "/" + hwNum
    print("Closing handin directories in " + handinDir)
    if (not os.path.exists(handinDir)):
        print("\n" + HW_NUM + " handin directory does not exist.")
        exit(255)
    fileList = os.listdir(handinDir)
    dirList = []
    for f in fileList:
        if (os.path.isdir(handinDir + "/" + f)):
            dirList.append(f)

    startNow = False
    try:
        if (isScheduled):
            print("Waiting for scheduled time: {:02d}:{:02d}".format(closeTime.tm_hour,
                closeTime.tm_min))
        while (not startNow):
            if (not isScheduled):
                break
            if (checkTime(closeTime)):
                startNow = True
            else:
                time.sleep(30)
        admin.closeStudentDirs(handinDir, dirList, dryrun=dryrun)
        print("\n{}Handin directories closed.{}".format(bcolors.OKGREEN, bcolors.ENDC))

        if (not skip):
            sys.stdout.write("\nChecking handins for all students...\n")
            sys.stdout.flush()
            try:
                errorStudents = admin.checkStudents(CFG_DIR, handinDir, dirList, hwNum)
                gptStudents = admin.checkStudentGPT(handinDir, dirList)
            except admin.ConfigError as e:
                print(e)
                print('Fatal error encountered. Exiting...')
                return 255
            sys.stdout.write("Done!\n")
            sys.stdout.flush()
            admin.writeResults(errorStudents, hwNum, RESULTS_DIR)
            admin.writeGPT(gptStudents, hwNum, RESULTS_DIR)
        return 0
    except (KeyboardInterrupt):
        return 0
    except (SystemExit):
        raise

sys.exit(main())
